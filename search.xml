<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Tensorflow]]></title>
    <url>%2F2019%2F08%2F13%2FTensorflow%2F</url>
    <content type="text"><![CDATA[Tensorflow所有变量必须以tensor格式创建，使用12345678变量创建完后需要初始化```pythoninit_op = tf.global_variables_initializer()with tf.Session() as sess: sess.run(init_op) print(y.eval())]]></content>
  </entry>
  <entry>
    <title><![CDATA[Pandas]]></title>
    <url>%2F2019%2F08%2F13%2FPandas%2F</url>
    <content type="text"><![CDATA[PandasPandas是一个强大的分析结构化数据的工具集；它的使用基础是Numpy（提供高性能的矩阵运算）；用于数据挖掘和数据分析，同时也提供数据清洗功能。 主要函数 读取Excel文件1idCardInfo = pd.read_excel("ID.xlsx", encoding = 'gbk') 返回值是一个类 123print(type(idCardInfo)) #类型print(idCardInfo.dtypes) #每个元素的类型&lt;class 'pandas.core.frame.DataFrame'&gt; 利器 DataFrame输出类的某些属性 显示前/后n条信息12idCardInfo.head(n) #默认显示前五条 idCardInfo.tail(n) 显示标题栏内容1idCardInfo.columns 形状1idCardInfo.shape 切片与定位12idCardInfo.loc[n] #显示第0个数据idCardInfo.loc[3:5] #切片，显示第3-5个数据 显示相关列的数据12idCardInfo["Name"] #指定一列idCardInfo[["Name", "confidence"]] #用列表指定多列 对数据进行相关操作 新增指标(列) 12cMoney = idCardInfo["Money"] / idCardInfo["confidence"]idCardInfo["cMoney"] = cMoney]]></content>
      <categories>
        <category>Python库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Numpy]]></title>
    <url>%2F2019%2F08%2F13%2FNumpy%2F</url>
    <content type="text"><![CDATA[NumpyNumpy是一个Python的一个扩展程序库支持大量的维度数组与矩阵运算，也针对数组运算提供大量的数学函数库。 数学函数 函数 返回值 功能 np.arange(n) Ndarray 返回递增一维矩阵 rd.random(a, b) Ndarray 生成a行b列随机矩阵 np.linspace(1, pi, 10) Ndarray 从1到pi递增均分10个数 np.floor() 与参数相同 向下取整 np.exp(x) 与参数相同 指数函数 矩阵成员变量 变量名称 类型 含义 shape 元组 (a,b)返回形状 ndim int 数组维度 size int 元素个数 矩阵相关操作 创建矩阵1npArray = np.array([1,2,3],[4,5,6]) 打印矩阵元素类型与元素类型转换12print(npArray.dtype)npArray = npArray.astype(float) 矩阵求和123print(npArray9.sum())print(npArray9.sum(axis = 1)) #按行求和print(npArray9.sum(axis = 0)) #按列求和 矩阵降维 将矩阵变换为一维矩阵(数组) 12numpy.ravel() #返回视图，修改将会修改原矩阵numpy.flatten() #返回副本，修改对原矩阵不做影响 矩阵变换12npArray10 = np.arange(15).reshape(3,5) #转换为3行5列，元素个数必须对应npArray16.shape = (-1,3) #变换为3行n列-1为补全参数自动计算 矩阵相乘 必须左边列数等于右边行数，得到结果为左行右列 1np.dot(npArray13, npArray14) 矩阵拆分与拼接123456print(np.hstack((npArray17, npArray18))) #按行拼接print(np.vstack((npArray17, npArray18))) #按列拼接print("---------按列拆分--------")print(np.hsplit(npArray17, 4))print("---------按行拆分--------")print(np.vsplit(npArray17, 2)) 求某一维度最大元素位置12print(npArray19.argmax(axis = 1)) #按行求最大值的下标print(npArray19.argmax(axis = 0)) #按列求最大值的下标 矩阵扩展 第一个参数 目标矩阵 第二个参数（行倍数，列倍数） 1np.tile(npArray20, (2,3)) 矩阵排序123print(np.sort(npArray20, axis = 1)) #按行排序print(np.sort(npArray20, axis = 0)) #按列排序print(npArray20.argsort(axis = 1)) #输出按行排序值的索引 矩阵特征值分解1234567npArray21 = np.array([ [2, 3], [2, 1]])a, b = np.linalg.eig(npArray21)print(a) #拉姆达print(b) #特征向量 矩阵元素随机排列 1np.random.shuffle(npArray22)]]></content>
      <categories>
        <category>Python库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[0x01 Test]]></title>
    <url>%2F2019%2F07%2F05%2Ftest%2F</url>
    <content type="text"><![CDATA[这是第一篇测试文章 正文]]></content>
      <categories>
        <category>测试分类</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
